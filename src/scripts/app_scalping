#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
from asyncio import Queue
import signal
import sys

# installed
import uvloop
import numpy as np
import redis.asyncio as aioredis

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

from configuration import config, config_oci
from streaming_helper.transaction_management.deribit import cancelling_active_orders,processing_orders
from streaming_helper.restful_api.deribit import end_point_params_template
from market_understanding.price_action.candles_analysis import get_market_condition
from streaming_helper.data_announcer.deribit import get_instrument_summary, starter
from streaming_helper.utilities import  error_handling,string_modification as str_mod,system_tools,template
from streaming_helper.strategies.deribit import relabelling_trading_result
from streaming_helper.channel_management.deribit import subscribing_to_channels
from streaming_helper.channel_management import get_published_messages
from streaming_helper.db_management import sqlite_management as db_mgt

pool = aioredis.ConnectionPool.from_url(
    "redis://localhost", 
    port=6379, 
    db=0, 
    protocol=3, 
    encoding="utf-8",
    decode_responses=True
    )

client_redis: object = aioredis.Redis.from_pool(pool)


def get_settlement_period(strategy_attributes) -> list:

    return str_mod.remove_redundant_elements(
        str_mod.remove_double_brackets_in_list(
            [o["settlement_period"] for o in strategy_attributes]
        )
    )

def compute_notional_value(
    index_price: float,
    equity: float,
) -> float:
    """ """
    return index_price * equity


def get_index(ticker: dict) -> float:

    try:

        index_price = ticker["index_price"]

    except:

        index_price = []

    if index_price == []:
        index_price = ticker["estimated_delivery_price"]

    return index_price


async def main():
    """
    """
    
    exchange = "deribit"
    
    sub_account_id = f"{exchange}-148510"
    
    strategy = "scalping"
    
    # registering strategy config file    
    file_toml = "config_strategies.toml"
        
    try:

        # connecting to redis pubsub
        pubsub: object = client_redis.pubsub()

        config_path = system_tools.provide_path_for_file(".env")
        
        parsed= config.main_dotenv(
            sub_account_id,
            config_path,
        )
                
        client_id: str = parsed["client_id"]
        client_secret: str = config_oci.get_oci_key(parsed["key_ocid"])

        #instantiate private connection
        api_request: object = end_point_params_template.SendApiRequest(client_id,client_secret)

        # parsing config file
        config_app = system_tools.get_config_tomli(file_toml)

        # get redis channels
        redis_channels: dict = config_app["redis_channels"][0]
        
        # subscribe to channels
        await subscribing_to_channels.redis_channels(
            pubsub,
            redis_channels,
            "scalping",
        )

        # get tradable strategies
        tradable_config_app = config_app["tradable"]

        # get TRADABLE currencies
        currencies: list = [o["spot"] for o in tradable_config_app][0]

        strategy_attributes = config_app["strategies"]

        relevant_tables = config_app["relevant_tables"][0]

        order_db_table = relevant_tables["orders_table"]

        cancellable_strategies = [
            o["strategy_label"] for o in strategy_attributes if o["cancellable"] == True
        ]

        settlement_periods = get_settlement_period(strategy_attributes)

        futures_instruments = await get_instrument_summary.get_futures_instruments(
            currencies,
            settlement_periods,
        )

        instrument_attributes_futures_all = futures_instruments["active_futures"]

        # get redis channels
        market_analytics_channel: str = redis_channels["market_analytics_update"]
        ticker_cached_channel: str = redis_channels["ticker_cache_updating"]
        portfolio_channel: str = redis_channels["portfolio"]
        my_trades_channel: str = redis_channels["my_trades_cache_updating"]
        order_update_channel: str = redis_channels["order_cache_updating"]
        sub_account_cached_channel: str = redis_channels["sub_account_cache_updating"]
        my_trade_receiving_channel: str = redis_channels["my_trade_receiving"]
        
        result_template = template.redis_message_template()
        
        resolutions: list = [o["resolutions"] for o in tradable_config_app][0]

        strategy_attributes = config_app["strategies"]

        cached_ticker_all = []

        not_cancel = True
        
        sub_account_cached_channel: str = redis_channels["sub_account_cache_updating"]
            
        # sub_account_combining        
        sub_accounts = [await api_request.get_subaccounts_details(o) for o in currencies]
        
        initial_data_subaccount = starter.sub_account_combining(
            sub_accounts,
            sub_account_cached_channel,
            result_template,
        )

        sub_account_cached_params = initial_data_subaccount["params"]

        sub_account_cached = sub_account_cached_params["data"]

        cached_orders = sub_account_cached["orders_cached"]

        query_trades = f"SELECT * FROM  v_trading_all_active"

        result_template = template.redis_message_template()

        my_trades_active_from_db = await db_mgt.executing_query_with_return(
            query_trades
        )

        initial_data_my_trades_active = starter.my_trades_active_combining(
            my_trades_active_from_db,
            my_trades_channel,
            result_template,
        )

        my_trades_active_all = initial_data_my_trades_active["params"]["data"]

        # get portfolio from exchg
        portfolio_from_exchg = await api_request.get_subaccounts()

        initial_data_portfolio = starter.portfolio_combining(
            portfolio_from_exchg,
            portfolio_channel,
            result_template,
        )

        portfolio_all = initial_data_portfolio["params"]["data"]

        market_condition_all = []

        while True:

            try:

                message_byte = await pubsub.get_message()

                params = await get_published_messages.get_redis_message(message_byte)

                data, message_channel = params["data"], params["channel"]

                if my_trade_receiving_channel in message_channel:

                    my_trades_active_all = data
                    
                if sub_account_cached_channel in message_channel:

                    cached_orders = data["open_orders"]

                    my_trades_active_all = data["my_trades"]

                if market_analytics_channel in message_channel:

                    market_condition_all = data

                if portfolio_channel in message_channel:

                    portfolio_all = data["cached_portfolio"]

                if sub_account_cached_channel in message_channel:

                    cached_orders = data["open_orders"]

                    my_trades_active_all = data["my_trades"]

                if my_trades_channel in message_channel:

                    my_trades_active_all = data

                if order_update_channel in message_channel:

                    cached_orders = data["open_orders"]

                if ticker_cached_channel in message_channel and market_condition_all:

                    cached_ticker_all = data["data"]

                    server_time = data["server_time"]

                    currency_upper = data["currency_upper"]

                    currency_lower = currency_upper.lower()

                    instrument_name_perpetual = f"{currency_upper}-PERPETUAL"

                    market_condition = [
                        o
                        for o in market_condition_all
                        if instrument_name_perpetual in o["instrument_name"]
                    ][0]

                    portfolio = [
                        o
                        for o in portfolio_all
                        if currency_upper == o["currency"].upper()
                    ][0]
                    #! need to update currency to upper from starter

                    equity: float = portfolio["equity"]

                    ticker_perpetual_instrument_name = [
                        o
                        for o in cached_ticker_all
                        if instrument_name_perpetual in o["instrument_name"]
                    ][0]

                    index_price = get_index(ticker_perpetual_instrument_name)

                    my_trades_currency_all_transactions: list = (
                        []
                        if not my_trades_active_all
                        else [
                            o
                            for o in my_trades_active_all
                            if currency_upper in o["instrument_name"]
                        ]
                    )

                    my_trades_currency_all: list = (
                        []
                        if my_trades_currency_all_transactions == 0
                        else [
                            o
                            for o in my_trades_currency_all_transactions
                            if o["instrument_name"]
                            in [
                                o["instrument_name"]
                                for o in instrument_attributes_futures_all
                            ]
                        ]
                    )

                    orders_currency = (
                        []
                        if not cached_orders
                        else [
                            o
                            for o in cached_orders
                            if currency_upper in o["instrument_name"]
                        ]
                    )

                    if index_price is not None and equity > 0:

                        my_trades_currency: list = [
                            o for o in my_trades_currency_all if o["label"] is not None
                        ]

                        notional: float = compute_notional_value(index_price, equity)

                        strategy_params = [
                            o
                            for o in strategy_attributes
                            if o["strategy_label"] == strategy
                        ][0]

                        my_trades_currency_strategy = [
                            o
                            for o in my_trades_currency
                            if strategy in (o["label"])
                        ]

                        orders_currency_strategy = (
                            []
                            if not orders_currency
                            else [
                                o
                                for o in orders_currency
                                if strategy in (o["label"])
                            ]
                        )
                        
                        max_position: int = notional * -1
    
    
            except Exception as error:

                await error_handling.parse_error_message_with_redis(
                    client_redis,
                    error,
                )

                continue

            finally:
                await asyncio.sleep(0.001)
   
    except Exception as error:
        
        await error_handling.parse_error_message_with_redis(
            client_redis,
            error,
            )

def handle_ctrl_c(
    signum, 
    stack_frame
    )->None:
    
    sys.exit(0)
    
                  
signal_handler = system_tools.SignalHandler()

if __name__ == "__main__":
    
    try:
        signal.signal(signal.SIGINT, handle_ctrl_c) # terminate on ctrl-c
        
        uvloop.run(main())
        
    except(
        KeyboardInterrupt, 
        SystemExit
        ):
        
        asyncio.get_event_loop().run_until_complete(main())
        
    except Exception as error:
        asyncio.run (error_handling.parse_error_message_with_redis(
            client_redis,
            error,
            ))
        
        
